%table.table.input_outputs
  %tbody
    %tr
      %td
        %table.table.table-condensed.table-bordered
          %thead
            %tr
              %th.centered Links
              %th.centered{:colspan => 2}Outputs
            %tr
              %th.output-demand{ title: converter_flow(c, :outputs) }
                = auto_number converter_flow(c, :outputs)
              %th Energy carrier
              %th Conversion efficiency
          %tbody
            - c.outputs.sort_by { |c| c.carrier.key }.each do |output_slot|
              %tr
                %td
                  - if output_slot.links.any?
                    %table.table.table-condensed.table-bordered
                      %thead
                        %tr
                          %th Converter
                          %th Energy flow (MJ)
                          %th Carrier share
                          %th Type
                      %tbody
                        - output_slot.links.sort_by { |s| s.lft_converter.key }.each_with_index do |output_link, i|
                          %tr
                            %td
                              = link_to output_link.lft_converter.key, data_converter_path(:id => output_link.lft_converter)
                              %span(style="font-size: 11px")
                                = link_to '(doc)', link_to_edge_file(output_link)
                            %td{:title => output_link.value}= auto_number output_link.value
                            %td{:title => output_link.share}= "#{(100.0 * output_link.parent_share).round(2)} %" unless output_slot.external_value == 0
                            %td
                              = output_link.link_type
                              - if output_link.reversed?
                                %span(style="color: #999") (rev.)
                  %td.centered{:title => output_slot.class.name}= output_slot.carrier.key
                  %td.centered{:title => output_slot.conversion}
                    - if output_slot.conversion
                      == #{ (100.0 * output_slot.conversion).round(2) } %
                      - if kms_slot?(output_slot)
                        .slot-unit== (#{ output_slot.conversion.round(3) } km/MJ)
      %td
      %td
        %table.table.table-condensed.table-bordered
          %thead
            %tr
              %th.centered{:colspan => 2} Inputs
              %th.centered Links
            %tr
              %th Input share
              %th Energy carrier
              %th.input-demand{ title: converter_flow(c, :inputs) }
                = auto_number converter_flow(c, :inputs)
          %tbody
            - c.inputs.sort_by { |c| c.carrier.key }.each do |input_slot|
              %tr
                %td.centered{:title => input_slot.conversion}= "#{(100 * input_slot.conversion).round(2)} %"  unless input_slot.conversion.nil?
                %td.centered{:title => input_slot.class.name}= input_slot.carrier.key
                %td
                  - if input_slot.links.any?
                    %table.table.table-condensed.table-bordered
                      %thead
                        %tr
                          %th Type
                          %th Carrier supply
                          %th
                          %th Energy flow (MJ)
                          %th Converter
                      %tbody
                        - input_slot.links.sort_by { |s| s.lft_converter.key }.each_with_index do |input_link, i|
                          %tr
                            %td
                              = input_link.link_type
                              - if input_link.reversed?
                                %span(style="color: #999") (rev.)
                            %td{:title => input_link.share}= "#{(100 * input_link.share).round(2)} %" unless input_link.share.nil?
                            %td
                              - if input_link.flexible?
                                - if input_link.priority != -Float::INFINITY
                                  Priority:
                                  %strong= input_link.priority
                                - if input_link.max_demand
                                  %br
                                  Max Demand:
                                  %strong= auto_number input_link.max_demand
                            %td{:title => input_link.value}= auto_number input_link.value
                            %td
                              = link_to input_link.rgt_converter.key, data_converter_path(:id => input_link.rgt_converter)
                              %span(style="font-size: 11px")
                                = link_to '(doc)', link_to_edge_file(input_link)
