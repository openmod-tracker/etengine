%table.table.converter-links
  %tbody
    %tr
      %td
        %table.table.table-condensed.table-bordered
          %thead
            %tr
              %th.centered
                Links
                %span.aggregate-demand
                  = auto_number converter_flow(c, :outputs)
              %th.centered Outputs
          %tbody
            - c.outputs.sort_by { |c| c.carrier.key }.each do |output_slot|
              %tr.carrier
                %td.links
                  - if output_slot.links.any?
                    %table.table.table-condensed
                      %thead
                        %tr
                          %th.link-target Converter
                          %th.energy MJ
                          %th.share Share
                          %th.type Type
                      %tbody
                        - output_slot.links.sort_by { |s| s.lft_converter.key }.each_with_index do |output_link, i|
                          %tr
                            %td
                              = link_to output_link.lft_converter.key, inspect_converter_path(:id => output_link.lft_converter)
                              .more-info
                                = link_to 'View .ad file', link_to_edge_file(output_link)
                            %td.value{:title => output_link.value}= auto_number output_link.value
                            %td.share{:title => output_link.share}= "#{(100.0 * output_link.parent_share).round(2)} %" unless output_slot.external_value == 0
                            %td
                              = output_link.link_type.to_s.humanize
                              - if output_link.reversed?
                                .more-info Reversed
                  %td.centered{ title: output_slot.carrier.key.to_s.humanize }
                    .carrier-name{ title: output_slot.class.name }
                      = output_slot.carrier.key.to_s.humanize
                    - if output_slot.conversion
                      %span{ title: output_slot.conversion }
                        == #{ (100.0 * output_slot.conversion).round(2) } %
                      - if kms_slot?(output_slot)
                        .slot-unit== (#{ output_slot.conversion.round(3) } km/MJ)
      %td
        %table.table.table-condensed.table-bordered
          %thead
            %tr
              %th.centered Inputs
              %th.centered
                Links
                %span.aggregate-demand{ title: converter_flow(c, :inputs) }
                  = auto_number converter_flow(c, :inputs)
          %tbody
            - c.inputs.sort_by { |c| c.carrier.key }.each do |input_slot|
              %tr.carrier
                %td.centered{ title: input_slot.carrier.key.to_s.humanize }
                  .carrier-name{ title: input_slot.class.name }
                    = input_slot.carrier.key.to_s.humanize
                  - if input_slot.conversion
                    %span{ title: input_slot.conversion }
                      = "#{(100 * input_slot.conversion).round(2)} %"
                %td.links
                  - if input_slot.links.any?
                    %table.table.table-condensed
                      %thead
                        %tr
                          %th.type Type
                          %th.share Share
                          %th.energy MJ
                          %th.link-target Converter
                      %tbody
                        - input_slot.links.sort_by { |s| s.rgt_converter.key }.each_with_index do |input_link, i|
                          %tr
                            %td
                              = input_link.link_type.to_s.humanize
                              - if input_link.reversed?
                                .more-info Reversed

                            %td.share{:title => input_link.share}= "#{(100 * input_link.share).round(2)} %" unless input_link.share.nil?
                            %td.value{:title => input_link.value}= auto_number input_link.value
                            %td
                              = link_to input_link.rgt_converter.key, inspect_converter_path(:id => input_link.rgt_converter)
                              .more-info
                                = link_to 'View .ad file', link_to_edge_file(input_link)
                                - if input_link.flexible?
                                  - if input_link.priority != -Float::INFINITY
                                    %strong
                                      Priority:
                                      = input_link.priority
                                  - if input_link.max_demand
                                    %strong
                                      Max Demand:
                                      = auto_number input_link.max_demand

